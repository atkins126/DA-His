unit FileService_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, 
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Generated:} FileServiceLib_Intf;

type
  { TFileService }
  TFileService = class(TRORemoteDataModule, IFileService)
  private
  protected
    { IFileService methods }
    function FindPath(const Path: string): FileArray;
    function FileAttr(const FileName: string): FileInfo;
    function UploadFile(const FileName: string; const FileSize: Integer; const StartPos: Integer; const Block: Binary): Integer;
    function DownloadFile(const FileName: string; const StartPos: Integer; const BlockSize: Integer): Binary;
    function RenameFile(const OldName: string; const NewName: string): Integer;
    function RemoveFile(const FileName: string): Integer;
    function ServiceValue(const ValueName: string): Variant;
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
  {$R *.dfm}
{$ELSE}
  {$R *.lfm}
{$ENDIF}
uses
  FileService_ServerBackend, uROClassFactories,
  {Generated:} FileServiceLib_Invk;

procedure Create_FileService(out anInstance : IUnknown);
begin
  anInstance := TFileService.Create(nil);
end;

{ FileService }
function TFileService.FindPath(const Path: string): FileArray;
begin
  Result := FileServiceManager.FindPath(Self, Path);
end;

function TFileService.UploadFile(const FileName: string; const FileSize: Integer; const StartPos: Integer; const Block: Binary): Integer;
begin
  Result := FileServiceManager.UploadFile(Self, FileName, FileSize, StartPos, Block);
end;

function TFileService.DownloadFile(const FileName: string; const StartPos: Integer; const BlockSize: Integer): Binary;
begin
  Result := FileServiceManager.DownloadFile(Self, FileName, StartPos, BlockSize);
end;

function TFileService.RenameFile(const OldName: string; const NewName: string): Integer;
begin
  Result := FileServiceManager.RenameFile(Self, OldName, NewName);
end;

function TFileService.RemoveFile(const FileName: string): Integer;
begin
  Result := FileServiceManager.RemoveFile(Self, FileName);
end;

function TFileService.ServiceValue(const ValueName: string): Variant;
begin
  Result := FileServiceManager.ServiceValue(Self, ValueName);
end;

function TFileService.FileAttr(const FileName: string): FileInfo;
begin
  Result := FileServiceManager.FileAttr(Self, FileName);
end;

var
  fClassFactory: IROClassFactory;

initialization
  //fClassFactory := TROClassFactory.Create('FileService', {$IFDEF FPC}@{$ENDIF}Create_FileService, TFileService_Invoker);
  fClassFactory := TROPooledClassFactory.Create('FileService', {$IFDEF FPC}@{$ENDIF}Create_FileService, TFileService_Invoker, 10);
  // RegisterForZeroConf(fClassFactory,'_FileService_rosdk._tcp.');

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
