unit HisService_System_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, App_DAServer, HisService_System_Backend,
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Ancestor Implementation:} DataAbstractService_Impl,
  {Used RODLs:} DataAbstract4_Intf,
  {Generated:} HisLibrary_Intf, uROClient, uDADataStreamer,
  uDAInterfaces, uDABin2DataStreamer, uDAScriptingProvider, uDABusinessProcessor,
  uDAFields, uDADelta, uROComponent, uDAJSONDataStreamer;

type
  { THisService_System }
  THisService_System = class(TDataAbstractService, IHisService_System)
    procedure DataAbstractServiceActivate(const aClientID: TGUID;
      aSession: TROSession; const aMessage: IROMessage);
    procedure DataAbstractServiceDeactivate(const aClientID: TGUID;
      aSession: TROSession);
    procedure DataAbstractServiceCreate(Sender: TObject);
    procedure DataAbstractServiceUpdateDataBeginTransaction(
      Sender: TObject; var aUseDefaultTransactionLogic: Boolean);
  private
  protected
    { IHisService_System methods }
    function IsFieldValueExists(const ATableName: string; const AFieldName: string; const AFieldValue: string): Boolean;
    function ChangePassword(const UserID: string; const OldPassword: string; const NewPassword: string): Boolean;
    function ResetPassword(const UserID: string; const NewPassword: string): Boolean;
    function WriteLog(const AWorkerID: Integer; const AFlag: Integer; const ATitle: string; const AContent: string): Integer;
    function GetParam(const AParamName: string; const ADefaultValue: Variant): Variant;
    procedure WriteParam(const AParamName: string; const AParamValue: Variant);
    function GetNextNumber(const NumberName: string; const NumberBits: string; const YMDFlag: Integer): string;
    function GetFieldMaxValue(const ATableName: string; const AFieldName: string): Variant;
    procedure SelectOffice(const OfficeID: string; const OfficeName: string; const OfficeUse: string);
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
  {$R *.dfm}
{$ELSE}
  {$R *.lfm}
{$ENDIF}
uses
  {Generated:} HisLibrary_Invk, uROClassFactories;

var
  fClassFactory: IROClassFactory;

procedure Create_HisService_System(out anInstance : IUnknown);
begin
  anInstance := THisService_System.Create(nil);
end;

{ HisService_System }
function THisService_System.IsFieldValueExists(const ATableName: string;
   const AFieldName: string; const AFieldValue: string): Boolean;
begin
  Result := SystemBackend.IsFieldValueExists(Self, ATableName, AFieldName, AFieldValue);
end;

function THisService_System.ChangePassword(const UserID: string;
  const OldPassword: string; const NewPassword: string): Boolean;
begin
  Result := SystemBackend.ChangePassword(Self, UserID, OldPassword, NewPassword);
end;

function THisService_System.ResetPassword(const UserID,
  NewPassword: string): Boolean;
begin
  Result := SystemBackend.ResetPassword(Self, UserID, NewPassword);
end;

function THisService_System.WriteLog(const AWorkerID: Integer;
  const AFlag: Integer; const ATitle: string;
  const AContent: string): Integer;
begin
  Result := SystemBackend.WriteLog(Self, AWorkerID, AFlag, ATitle, AContent);
end;

function THisService_System.GetParam(const AParamName: string;
  const ADefaultValue: Variant): Variant;
begin
  Result := SystemBackend.GetParam(Self, AParamName, ADefaultValue);
end;

procedure THisService_System.WriteParam(const AParamName: string;
  const AParamValue: Variant);
begin
  SystemBackend.WriteParam(Self, AParamName, AParamValue);
end;

function THisService_System.GetNextNumber(const NumberName: string;
  const NumberBits: string; const YMDFlag: Integer): string;
begin
end;

function THisService_System.GetFieldMaxValue(const ATableName: string;
  const AFieldName: string): Variant;
begin
  Result := SystemBackend.GetFieldMaxValue(Self, ATableName, AFieldName);
end;

procedure THisService_System.DataAbstractServiceActivate(
  const aClientID: TGUID; aSession: TROSession;
  const aMessage: IROMessage);
begin
  ServiceDataStreamer := SystemBackend.GetDAStreamer;
  ServiceSchema := SystemBackend.GetSchema;
end;

procedure THisService_System.DataAbstractServiceDeactivate(
  const aClientID: TGUID; aSession: TROSession);
begin
  ServiceSchema := nil;
end;

procedure THisService_System.DataAbstractServiceCreate(Sender: TObject);
begin
  AllowWhereSql := True;
end;

procedure THisService_System.SelectOffice(const OfficeID, OfficeName,
  OfficeUse: string);
begin
  // 记录选择的登录科室
  Session['OfficeID'] := OfficeID;
  Session['OfficeName'] := OfficeName;
  Session['OfficeUse'] := OfficeUse;
end;

procedure THisService_System.DataAbstractServiceUpdateDataBeginTransaction(
  Sender: TObject; var aUseDefaultTransactionLogic: Boolean);
begin
  aUseDefaultTransactionLogic := False;
end;

initialization
  fClassFactory := TROPooledClassFactory.Create('HisService_System',
  {$IFDEF FPC}@{$ENDIF}Create_HisService_System, THisService_System_Invoker, 5);
  // RegisterForZeroConf(fClassFactory,'_HisService_System_rosdk._tcp.');

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
