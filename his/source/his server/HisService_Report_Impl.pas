unit HisService_Report_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, App_DAServer, App_FastReport, uROClasses,
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule, uROClassFactories,
  {Used RODLs:} DataAbstract4_Intf,
  {Generated:} HisLibrary_Intf, frxClass, fs_iinterpreter, DB, ADODB;

type
  { THisService_Report }
  THisService_Report = class(TRORemoteDataModule, IHisService_Report)
    Reporter: TfrxReport;
  private
  protected
    { IHisService_Report methods }
    function PrintReport(const ReportName: string;
      const ParamNames: StringArray;
      const ParamValues: StringArray;
      const Flag: Integer): Binary;
  end;


  THisFunction = class(TfsRTTIModule)
  private
    function CallMethod(Instance: TObject; ClassType: TClass;
      const MethodName: string; Caller: TfsMethodHelper): Variant;
  public
    constructor Create(AScript: TfsScript); override;
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
  {$R *.dfm}
{$ELSE}
  {$R *.lfm}
{$ENDIF}
uses
  {Generated:} HisLibrary_Invk;

procedure Create_HisService_Report(out anInstance : IUnknown);
begin
  anInstance := THisService_Report.Create(nil);
end;

{ HisService_Report }
function THisService_Report.PrintReport(const ReportName: string;
  const ParamNames: StringArray; const ParamValues: StringArray;
  const Flag: Integer): Binary;
var
  I: Integer;
  ReportFile: string;
begin
  ReportFile := FastReport.ReportFilePath + ReportName;

  Check(not FileExists(ReportFile), '打印模版文件找不到:%s.', [ReportName]);
  Check(ParamNames.Count <> ParamValues.Count, '打印参数名和值个数不一致');

  try
    with Reporter do
    begin
      Variables.Clear;
      LoadFromFile(ReportFile);
      for I := 0 to ParamNames.Count - 1 do
        Variables[ParamNames.Items[I]] := QuotedStr(ParamValues.Items[I]);
        //参数值好像用引擎来执行，字符串必须要括起来

      PrepareReport;
      Result := Binary.Create();
      // SaveToStream(Result);
      //保存报表选项，如设置打印份数，是否显示对话框。是否实用？
      PreviewPages.SaveToStream(Result);
    end;
  except
    on E: Exception do
      raise Exception.Create('打印出错|' + ReportName + '|' + E.Message);
  end;
end;


{ THisFunction }

function THisFunction.CallMethod(Instance: TObject; ClassType: TClass;
  const MethodName: string; Caller: TfsMethodHelper): Variant;
begin

end;

constructor THisFunction.Create(AScript: TfsScript);
var
  I: Integer;
begin
  inherited;
  with AScript do
  begin
    //todo: 添加更多HIS打印功能
    // 添加ADO连接字符串常量， 用于FastReport
    with RemoteServer.ConnectionManager.Connections do
      for I := 0 to Count - 1 do
      begin
        AddConst('DB_' + Connections[I].Name, 'string',
          DAString2ADOString(Connections[I].ConnectionString));
        //AppCore.Logger.Write(DAString2ADOString(Connections[I].ConnectionString));
      end;
  end;
end;


var
  fClassFactory: IROClassFactory;
initialization                                                                                             
  fsRTTIModules.Add(THisFunction);
  fClassFactory := TROPooledClassFactory.Create('HisService_Report',
    {$IFDEF FPC}@{$ENDIF}Create_HisService_Report, THisService_Report_Invoker, 10);
  // RegisterForZeroConf(fClassFactory,'_HisService_Report_rosdk._tcp.');

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
