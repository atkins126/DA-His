unit HisLibrary_Invk;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  uROEncoding,
  uROXMLIntf,
  uROServer,
  uROServerIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  DataAbstract4_Intf,
  DataAbstract4_Invk,
  HisLibrary_Intf;

type
  { Forward declarations }
  THisService_System_Invoker = class;
  THisService_Clinic_Invoker = class;
  THisService_Medicine_Invoker = class;
  THisService_Hosp_Invoker = class;
  THisService_Base_Invoker = class;
  THisService_YB_Invoker = class;
  THisService_XNH_Invoker = class;
  THisService_Dict_Invoker = class;
  THisService_Extend_Invoker = class;
  THisService_Stat_Invoker = class;
  THisService_Login_Invoker = class;
  THisService_Report_Invoker = class;

  THisService_System_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  published
    procedure Invoke_IsFieldValueExists(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_ChangePassword(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_ResetPassword(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_WriteLog(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetParam(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_WriteParam(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetNextNumber(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_GetFieldMaxValue(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_SelectOffice(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
  end;

  THisService_Clinic_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Medicine_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Hosp_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Base_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_YB_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_XNH_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Dict_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Extend_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Stat_Invoker = class(DataAbstract4_invk.TDataAbstractService_Invoker)
  public
    constructor Create; override;
  end;

  THisService_Login_Invoker = class(TROInvoker)
  public
    constructor Create; override;
  published
    procedure Invoke_Login(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
    procedure Invoke_Logout(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
  end;

  THisService_Report_Invoker = class(TROInvoker)
  public
    constructor Create; override;
  published
    procedure Invoke_PrintReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
  end;

implementation

uses
  uROEventRepository,
  uRORes,
  uROClient;

constructor THisService_System_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

procedure THisService_System_Invoker.Invoke_IsFieldValueExists(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_ATableName: string;
  l_AFieldName: string;
  l_AFieldValue: string;
  lResult: Boolean;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_IsFieldValueExists: __Instance does not support HisService_System interface');
    end;

    __Message.Read('ATableName', System.TypeInfo(string), l_ATableName, [paAsAnsiString]);
    __Message.Read('AFieldName', System.TypeInfo(string), l_AFieldName, [paAsAnsiString]);
    __Message.Read('AFieldValue', System.TypeInfo(string), l_AFieldValue, [paAsAnsiString]);

    lResult := __lintf.IsFieldValueExists(l_ATableName, l_AFieldName, l_AFieldValue);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'IsFieldValueExistsResponse');
    __Message.Write('Result', System.TypeInfo(Boolean), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_ChangePassword(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_UserID: string;
  l_OldPassword: string;
  l_NewPassword: string;
  lResult: Boolean;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_ChangePassword: __Instance does not support HisService_System interface');
    end;

    __Message.Read('UserID', System.TypeInfo(string), l_UserID, [paAsAnsiString]);
    __Message.Read('OldPassword', System.TypeInfo(string), l_OldPassword, [paAsAnsiString]);
    __Message.Read('NewPassword', System.TypeInfo(string), l_NewPassword, [paAsAnsiString]);

    lResult := __lintf.ChangePassword(l_UserID, l_OldPassword, l_NewPassword);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'ChangePasswordResponse');
    __Message.Write('Result', System.TypeInfo(Boolean), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_ResetPassword(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_UserID: string;
  l_NewPassword: string;
  lResult: Boolean;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_ResetPassword: __Instance does not support HisService_System interface');
    end;

    __Message.Read('UserID', System.TypeInfo(string), l_UserID, [paAsAnsiString]);
    __Message.Read('NewPassword', System.TypeInfo(string), l_NewPassword, [paAsAnsiString]);

    lResult := __lintf.ResetPassword(l_UserID, l_NewPassword);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'ResetPasswordResponse');
    __Message.Write('Result', System.TypeInfo(Boolean), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_WriteLog(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_AWorkerID: Integer;
  l_AFlag: Integer;
  l_ATitle: string;
  l_AContent: string;
  lResult: Integer;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_WriteLog: __Instance does not support HisService_System interface');
    end;

    __Message.Read('AWorkerID', System.TypeInfo(Integer), l_AWorkerID, []);
    __Message.Read('AFlag', System.TypeInfo(Integer), l_AFlag, []);
    __Message.Read('ATitle', System.TypeInfo(string), l_ATitle, [paAsAnsiString]);
    __Message.Read('AContent', System.TypeInfo(string), l_AContent, [paAsAnsiString]);

    lResult := __lintf.WriteLog(l_AWorkerID, l_AFlag, l_ATitle, l_AContent);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'WriteLogResponse');
    __Message.Write('Result', System.TypeInfo(Integer), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_GetParam(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_AParamName: string;
  l_ADefaultValue: Variant;
  lResult: Variant;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_GetParam: __Instance does not support HisService_System interface');
    end;

    __Message.Read('AParamName', System.TypeInfo(string), l_AParamName, [paAsAnsiString]);
    __Message.Read('ADefaultValue', System.TypeInfo(Variant), l_ADefaultValue, []);

    lResult := __lintf.GetParam(l_AParamName, l_ADefaultValue);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'GetParamResponse');
    __Message.Write('Result', System.TypeInfo(Variant), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_WriteParam(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_AParamName: string;
  l_AParamValue: Variant;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_WriteParam: __Instance does not support HisService_System interface');
    end;

    __Message.Read('AParamName', System.TypeInfo(string), l_AParamName, [paAsAnsiString]);
    __Message.Read('AParamValue', System.TypeInfo(Variant), l_AParamValue, []);

    __lintf.WriteParam(l_AParamName, l_AParamValue);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'WriteParamResponse');
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_GetNextNumber(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_NumberName: string;
  l_NumberBits: string;
  l_YMDFlag: Integer;
  lResult: string;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_GetNextNumber: __Instance does not support HisService_System interface');
    end;

    __Message.Read('NumberName', System.TypeInfo(string), l_NumberName, [paAsAnsiString]);
    __Message.Read('NumberBits', System.TypeInfo(string), l_NumberBits, [paAsAnsiString]);
    __Message.Read('YMDFlag', System.TypeInfo(Integer), l_YMDFlag, []);

    lResult := __lintf.GetNextNumber(l_NumberName, l_NumberBits, l_YMDFlag);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'GetNextNumberResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsAnsiString]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_GetFieldMaxValue(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_ATableName: string;
  l_AFieldName: string;
  lResult: Variant;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_GetFieldMaxValue: __Instance does not support HisService_System interface');
    end;

    __Message.Read('ATableName', System.TypeInfo(string), l_ATableName, [paAsAnsiString]);
    __Message.Read('AFieldName', System.TypeInfo(string), l_AFieldName, [paAsAnsiString]);

    lResult := __lintf.GetFieldMaxValue(l_ATableName, l_AFieldName);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'GetFieldMaxValueResponse');
    __Message.Write('Result', System.TypeInfo(Variant), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_System_Invoker.Invoke_SelectOffice(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_OfficeID: string;
  l_OfficeName: string;
  l_OfficeUse: string;
  __lintf: HisLibrary_Intf.IHisService_System;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_System, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_System_Invoker.Invoke_SelectOffice: __Instance does not support HisService_System interface');
    end;

    __Message.Read('OfficeID', System.TypeInfo(string), l_OfficeID, [paAsAnsiString]);
    __Message.Read('OfficeName', System.TypeInfo(string), l_OfficeName, [paAsAnsiString]);
    __Message.Read('OfficeUse', System.TypeInfo(string), l_OfficeUse, [paAsAnsiString]);

    __lintf.SelectOffice(l_OfficeID, l_OfficeName, l_OfficeUse);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_System', 'SelectOfficeResponse');
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
    __lintf := nil;
  end;
end;

constructor THisService_Clinic_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Medicine_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Hosp_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Base_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_YB_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_XNH_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Dict_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Extend_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Stat_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

constructor THisService_Login_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

procedure THisService_Login_Invoker.Invoke_Login(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_LoginText: string;
  lResult: string;
  __lintf: HisLibrary_Intf.IHisService_Login;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_Login, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_Login_Invoker.Invoke_Login: __Instance does not support HisService_Login interface');
    end;

    __Message.Read('LoginText', System.TypeInfo(string), l_LoginText, [paAsUTF8String]);

    lResult := __lintf.Login(l_LoginText);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_Login', 'LoginResponse');
    __Message.Write('Result', System.TypeInfo(string), lResult, [paAsUTF8String]);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
  end;
end;

procedure THisService_Login_Invoker.Invoke_Logout(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  __lintf: HisLibrary_Intf.IHisService_Login;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  try
    if not Supports(__Instance, IHisService_Login, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_Login_Invoker.Invoke_Logout: __Instance does not support HisService_Login interface');
    end;

    __lintf.Logout();

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_Login', 'LogoutResponse');
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

    __oResponseOptions := [roNoResponse];

  finally
    __lintf := nil;
  end;
end;

constructor THisService_Report_Invoker.Create;
begin
  inherited Create();
  FAbstract := false;
end;

procedure THisService_Report_Invoker.Invoke_PrintReport(const __Instance: IInterface; const __Message: IROMessage; const __Transport: IROTransport; out __oResponseOptions: TROResponseOptions);
var
  l_ReportName: string;
  l_ParamNames: DataAbstract4_intf.StringArray;
  l_ParamValues: DataAbstract4_intf.StringArray;
  l_Flag: Integer;
  lResult: Binary;
  __lObjectDisposer: TROObjectDisposer;
  __lintf: HisLibrary_Intf.IHisService_Report;
begin
  CheckRoles(__Instance, GetDefaultServiceRoles());
  l_ParamNames := nil;
  l_ParamValues := nil;
  lResult := nil;
  try
    if not Supports(__Instance, IHisService_Report, __lintf) then begin
      raise EIntfCastError.Create('Critical error in THisService_Report_Invoker.Invoke_PrintReport: __Instance does not support HisService_Report interface');
    end;

    __Message.Read('ReportName', System.TypeInfo(string), l_ReportName, [paAsAnsiString]);
    __Message.Read('ParamNames', System.TypeInfo(DataAbstract4_intf.StringArray), l_ParamNames, []);
    __Message.Read('ParamValues', System.TypeInfo(DataAbstract4_intf.StringArray), l_ParamValues, []);
    __Message.Read('Flag', System.TypeInfo(Integer), l_Flag, []);

    lResult := __lintf.PrintReport(l_ReportName, l_ParamNames, l_ParamValues, l_Flag);

    __Message.InitializeResponseMessage(__Transport, 'HisLibrary', 'HisService_Report', 'PrintReportResponse');
    __Message.Write('Result', System.TypeInfo(Binary), lResult, []);
    __Message.Finalize();
    __Message.UnsetAttributes(__Transport);

  finally
    __lintf := nil;
    __lObjectDisposer := TROObjectDisposer.Create(__Instance);
    try
      __lObjectDisposer.Add(l_ParamNames);
      __lObjectDisposer.Add(l_ParamValues);
      __lObjectDisposer.Add(lResult);
    finally
      __lObjectDisposer.Free();
    end;
  end;
end;

initialization
finalization
end.

