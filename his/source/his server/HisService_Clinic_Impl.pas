unit HisService_Clinic_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes,
  SysUtils,
  App_Common,
  App_DAServer,
  HisService_Clinic_Backend,
  {RemObjects:} uROXMLIntf,
  uROClientIntf,
  uROTypes,
  uROServer,
  uROServerIntf,
  uROSessions,
  {Required:} uRORemoteDataModule,
  {Ancestor Implementation:} DataAbstractService_Impl,
  {Used RODLs:} DataAbstract4_Intf,
  {Generated:} HisLibrary_Intf,
  uDAScriptingProvider,
  uDABusinessProcessor,
  uDAInterfaces,
  uROClient,
  uDADataStreamer,
  uDABin2DataStreamer, uDAFields, uDADelta, uDACore, uDAServerInterfaces,
  uDASchemaClasses, uROComponent, uDAJSONDataStreamer;

type
  { THisService_Clinic }
  THisService_Clinic = class(TDataAbstractService, IHisService_Clinic)
    BPFeeReturnDetail: TDABusinessProcessor;
    procedure DataAbstractServiceActivate(const aClientID: TGUID;
      aSession: TROSession; const aMessage: IROMessage);
    procedure DataAbstractServiceCreate(Sender: TObject);
    procedure DataAbstractServiceDeactivate(const aClientID: TGUID;
      aSession: TROSession);
    procedure BPFeeReturnDetailAfterProcessChange(
      Sender: TDABusinessProcessor; aChange: TDADeltaChange;
      Processed: Boolean; var CanRemoveFromDelta: Boolean);
    procedure DataAbstractServiceUpdateDataBeginTransaction(
      Sender: TObject; var aUseDefaultTransactionLogic: Boolean);
  private
  protected
    { IHisService_Clinic methods }
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
{$R *.dfm}
{$ELSE}
{$R *.lfm}
{$ENDIF}
uses
  {Generated:} HisLibrary_Invk,
  uROClassFactories;

procedure Create_HisService_Clinic(out anInstance: IUnknown);
begin
  anInstance := THisService_Clinic.Create(nil);
end;

{ HisService_Clinic }
var
  fClassFactory: IROClassFactory;

procedure THisService_Clinic.DataAbstractServiceActivate(
  const aClientID: TGUID; aSession: TROSession;
  const aMessage: IROMessage);
begin
  ServiceDataStreamer := ClinicBackend.GetDAStreamer;
  ServiceSchema := ClinicBackend.GetSchema;
end;

procedure THisService_Clinic.DataAbstractServiceCreate(Sender: TObject);
begin
  AllowWhereSql := True;
end;

procedure THisService_Clinic.DataAbstractServiceDeactivate(
  const aClientID: TGUID; aSession: TROSession);
begin
  ServiceSchema := nil;
end;

procedure THisService_Clinic.BPFeeReturnDetailAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctInsert, ctDelete:
      raise Exception.Create('不允许删除、新增退费明细');
    ctUpdate:
      begin
        ServiceSchema.NewCommand(Connection, 'Pro_Clin_FeeReturnDetail_AfterUpdate',
          ['RecDetailID'], [aChange.OldValueByName['RecDetailID']]);
      end;
  end;
end;

procedure THisService_Clinic.DataAbstractServiceUpdateDataBeginTransaction(
  Sender: TObject; var aUseDefaultTransactionLogic: Boolean);
begin
  aUseDefaultTransactionLogic := False; //默认无事务，从而可在Command中修改远程服务器上的数据
end;

initialization
  fClassFactory := TROPooledClassFactory.Create('HisService_Clinic',
    {$IFDEF FPC}@{$ENDIF}Create_HisService_Clinic, THisService_Clinic_Invoker, 10);

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.

