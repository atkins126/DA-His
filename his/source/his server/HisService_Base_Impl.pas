unit HisService_Base_Impl;

{----------------------------------------------------------------------------}
{ This unit was automatically generated by the RemObjects SDK after reading  }
{ the RODL file associated with this project .                               }
{                                                                            }
{ This is where you are supposed to code the implementation of your objects. }
{----------------------------------------------------------------------------}

{$I RemObjects.inc}

interface

uses
  {vcl:} Classes, SysUtils, App_DAServer, HisService_Base_Backend,
  {RemObjects:} uROXMLIntf, uROClientIntf, uROTypes, uROServer, uROServerIntf, uROSessions,
  {Required:} uRORemoteDataModule,
  {Ancestor Implementation:} DataAbstractService_Impl,
  {Used RODLs:} DataAbstract4_Intf,
  {Generated:} HisLibrary_Intf, uROClient, uDADataStreamer,
  uDAInterfaces, uDABin2DataStreamer, uDAScriptingProvider, uDABusinessProcessor,
  uDAFields, uDADelta, uDACore, uDAServerInterfaces, uDASchemaClasses,
  uROComponent, uDAJSONDataStreamer;

type
  { THisService_Base }
  THisService_Base = class(TDataAbstractService, IHisService_Base)
    BPFeeGroupMaster: TDABusinessProcessor;
    BPRecipeGroupMaster: TDABusinessProcessor;
    BPFeeMedicine: TDABusinessProcessor;
    BPFeeYBTable: TDABusinessProcessor;
    BPFeeXNH: TDABusinessProcessor;
    BPFeeGroupDetail: TDABusinessProcessor;
    BPRecipeGroupDetail: TDABusinessProcessor;
    BPFeeTreatment: TDABusinessProcessor;
    BPStatType: TDABusinessProcessor;
    BPFeeYB: TDABusinessProcessor;
    procedure DataAbstractServiceActivate(const aClientID: TGUID;
      aSession: TROSession; const aMessage: IROMessage);
    procedure DataAbstractServiceDeactivate(const aClientID: TGUID;
      aSession: TROSession);
    procedure BPFeeGroupMasterBeforeProcessChange(
      Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
      aChange: TDADeltaChange; var ProcessChange: Boolean);
    procedure BPFeeMedicineBeforeProcessChange(Sender: TDABusinessProcessor;
      aChangeType: TDAChangeType; aChange: TDADeltaChange;
      var ProcessChange: Boolean);
    procedure BPFeeMedicineAfterProcessChange(Sender: TDABusinessProcessor;
      aChange: TDADeltaChange; Processed: Boolean;
      var CanRemoveFromDelta: Boolean);
    procedure BPFeeYBTableBeforeProcessChange(Sender: TDABusinessProcessor;
      aChangeType: TDAChangeType; aChange: TDADeltaChange;
      var ProcessChange: Boolean);
    procedure BPFeeYBTableAfterProcessChange(Sender: TDABusinessProcessor;
      aChange: TDADeltaChange; Processed: Boolean;
      var CanRemoveFromDelta: Boolean);
    procedure BPFeeXNHBeforeProcessChange(Sender: TDABusinessProcessor;
      aChangeType: TDAChangeType; aChange: TDADeltaChange;
      var ProcessChange: Boolean);
    procedure BPFeeXNHAfterProcessChange(Sender: TDABusinessProcessor;
      aChange: TDADeltaChange; Processed: Boolean;
      var CanRemoveFromDelta: Boolean);
    procedure BPRecipeGroupMasterBeforeProcessChange(
      Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
      aChange: TDADeltaChange; var ProcessChange: Boolean);
    procedure BPFeeGroupDetailBeforeProcessChange(
      Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
      aChange: TDADeltaChange; var ProcessChange: Boolean);
    procedure BPFeeGroupDetailAfterProcessChange(
      Sender: TDABusinessProcessor; aChange: TDADeltaChange;
      Processed: Boolean; var CanRemoveFromDelta: Boolean);
    procedure BPRecipeGroupDetailBeforeProcessChange(
      Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
      aChange: TDADeltaChange; var ProcessChange: Boolean);
    procedure BPRecipeGroupDetailAfterProcessChange(
      Sender: TDABusinessProcessor; aChange: TDADeltaChange;
      Processed: Boolean; var CanRemoveFromDelta: Boolean);
    procedure BPStatTypeAfterProcessChange(Sender: TDABusinessProcessor;
      aChange: TDADeltaChange; Processed: Boolean;
      var CanRemoveFromDelta: Boolean);
  private
  protected
    { IHisService_Base methods }
  end;

implementation

{$IFDEF DELPHIXE2UP}
{%CLASSGROUP 'System.Classes.TPersistent'}
{$ENDIF}

{$IFNDEF FPC}
  {$R *.dfm}
{$ELSE}
  {$R *.lfm}
{$ENDIF}
uses
  {Generated:} HisLibrary_Invk, uROClassFactories;

procedure Create_HisService_Base(out anInstance : IUnknown);
begin
  anInstance := THisService_Base.Create(nil);
end;

var
  fClassFactory: IROClassFactory;

{ HisService_Base }

procedure THisService_Base.DataAbstractServiceActivate(
  const aClientID: TGUID; aSession: TROSession;
  const aMessage: IROMessage);
begin
  ServiceDataStreamer := BaseDataBackend.GetDAStreamer;
  ServiceSchema := BaseDataBackend.GetSchema;
end;

procedure THisService_Base.DataAbstractServiceDeactivate(
  const aClientID: TGUID; aSession: TROSession);
begin
  ServiceSchema := nil;
end;

procedure THisService_Base.BPFeeGroupMasterBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeGroupMaster_BeforeDelete',
      ['GroupID'], [aChange.OldValueByName['GroupID']]);
  end;
end;

procedure THisService_Base.BPFeeMedicineBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChange.ChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_Fee_BeforeDelete',
      ['FeeID'], [aChange.OldValueByName['FeeID']]);
  end;
end;

procedure THisService_Base.BPFeeMedicineAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctInsert:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_Fee_AfterInsert',
        ['FeeID'], [aChange.NewValueByName['FeeID']]);
    ctUpdate:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_Fee_AfterUpdate',
        ['FeeID'], [aChange.OldValueByName['FeeID']]);
  end;
end;

procedure THisService_Base.BPFeeYBTableBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChange.ChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeYB_BeforeDelete',
      ['YBFeeID'], [aChange.OldValueByName['YBFeeID']]);
  end;
end;

procedure THisService_Base.BPFeeYBTableAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctInsert:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeYB_AfterInsert',
        ['YBFeeID'], [aChange.NewValueByName['YBFeeID']]);
    ctUpdate:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeYB_AfterUpdate',
        ['YBFeeID'], [aChange.OldValueByName['YBFeeID']]);
  end;
end;

procedure THisService_Base.BPFeeXNHBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChange.ChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeXNH_BeforeDelete',
      ['XNHFeeID'], [aChange.OldValueByName['XNHFeeID']]);
  end;
end;

procedure THisService_Base.BPFeeXNHAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctInsert:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeXNH_AfterInsert',
        ['XNHFeeID'], [aChange.NewValueByName['XNHFeeID']]);
    ctUpdate:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeXNH_AfterUpdate',
        ['XNHFeeID'], [aChange.OldValueByName['XNHFeeID']]);
  end;
end;

procedure THisService_Base.BPRecipeGroupMasterBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_RecipeGroupMaster_BeforeDelete',
      ['GroupID'], [aChange.OldValueByName['GroupID']]);
  end;
end;

procedure THisService_Base.BPFeeGroupDetailBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeGroupDetail_BeforeDelete',
      ['DetailID'], [aChange.OldValueByName['DetailID']]);
  end;
end;

procedure THisService_Base.BPFeeGroupDetailAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctInsert:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeGroupDetail_AfterInsert',
        ['DetailID'], [aChange.NewValueByName['DetailID']]);
    ctUpdate:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_FeeGroupDetail_AfterUpdate',
        ['DetailID'], [aChange.OldValueByName['DetailID']]);
  end;
end;

procedure THisService_Base.BPRecipeGroupDetailBeforeProcessChange(
  Sender: TDABusinessProcessor; aChangeType: TDAChangeType;
  aChange: TDADeltaChange; var ProcessChange: Boolean);
begin
  if aChangeType = ctDelete then
  begin
    ServiceSchema.NewCommand(Connection, 'Pro_Base_RecipeGroupDetail_BeforeDelete',
      ['DetailID'], [aChange.OldValueByName['DetailID']]);
  end;
end;

procedure THisService_Base.BPRecipeGroupDetailAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctInsert:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_RecipeGroupDetail_AfterInsert',
        ['DetailID'], [aChange.NewValueByName['DetailID']]);
    ctUpdate:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_RecipeGroupDetail_AfterUpdate',
        ['DetailID'], [aChange.OldValueByName['DetailID']]);
  end;
end;

procedure THisService_Base.BPStatTypeAfterProcessChange(
  Sender: TDABusinessProcessor; aChange: TDADeltaChange;
  Processed: Boolean; var CanRemoveFromDelta: Boolean);
begin
  case aChange.ChangeType of
    ctUpdate:
      ServiceSchema.NewCommand(Connection, 'Pro_Base_StatType_AfterUpdate',
        ['OldStatTypeID', 'NewStatTypeID'], [aChange.OldValueByName['StatTypeID'],
          aChange.NewValueByName['StatTypeID']]);
  end;
end;

initialization
  fClassFactory := TROPooledClassFactory.Create('HisService_Base',
    {$IFDEF FPC}@{$ENDIF}Create_HisService_Base, THisService_Base_Invoker, 10);
  // RegisterForZeroConf(fClassFactory,'_HisService_Base_rosdk._tcp.');

finalization
  UnRegisterClassFactory(fClassFactory);
  fClassFactory := nil;

end.
